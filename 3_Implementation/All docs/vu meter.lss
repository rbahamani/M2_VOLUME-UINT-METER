
vu meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000001ea  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  00800074  00800074  00000292  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e7  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f1  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000343  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b4  00000000  00000000  0000167b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3f       	cpi	r26, 0xF4	; 244
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  8a:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
    }
}

void adc_init()
{
	ADMUX = 0xC0;
  92:	80 ec       	ldi	r24, 0xC0	; 192
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x82; 
  96:	82 e8       	ldi	r24, 0x82	; 130
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <adc_read>:
}

uint16_t adc_read()
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	00 d0       	rcall	.+0      	; 0xa2 <adc_read+0x6>
  a2:	00 d0       	rcall	.+0      	; 0xa4 <adc_read+0x8>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t retl,reth;
	ADMUX = 0xC0;
  a8:	80 ec       	ldi	r24, 0xC0	; 192
  aa:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1<<ADSC;
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	86 b9       	out	0x06, r24	; 6
	while(!ADIF);
	ADCSRA |= 1<<ADIF;
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	86 b9       	out	0x06, r24	; 6
	retl = ADCL;
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01
	reth = ADCH;
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9c 83       	std	Y+4, r25	; 0x04
  c6:	8b 83       	std	Y+3, r24	; 0x03
	reth<<=8;
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	9c 81       	ldd	r25, Y+4	; 0x04
  cc:	98 2f       	mov	r25, r24
  ce:	88 27       	eor	r24, r24
  d0:	9c 83       	std	Y+4, r25	; 0x04
  d2:	8b 83       	std	Y+3, r24	; 0x03
	reth|=retl;
  d4:	29 81       	ldd	r18, Y+1	; 0x01
  d6:	3a 81       	ldd	r19, Y+2	; 0x02
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	9c 81       	ldd	r25, Y+4	; 0x04
  dc:	82 2b       	or	r24, r18
  de:	93 2b       	or	r25, r19
  e0:	9c 83       	std	Y+4, r25	; 0x04
  e2:	8b 83       	std	Y+3, r24	; 0x03
	return reth;
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	9c 81       	ldd	r25, Y+4	; 0x04
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
	0x7F,0xFF
};

int main(void)
{
	DDRD |= 1<<PIND6 | 1<<PIND7; 
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	80 6c       	ori	r24, 0xC0	; 192
  fa:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1<<PIND7 | 1<<PIND6; 
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	80 6c       	ori	r24, 0xC0	; 192
 100:	82 bb       	out	0x12, r24	; 18
	LED_VU_L;
 102:	84 b3       	in	r24, 0x14	; 20
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 bb       	out	0x14, r24	; 20
	adc_init();
 108:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	
    while(1)
    {
      for(int x=0;x<S/2;x++)
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	25 c0       	rjmp	.+74     	; 0x15c <main+0x66>
      {
		  A[x] = ((uint16_t)adc_read());
 112:	0e 94 4e 00 	call	0x9c	; 0x9c <adc_read>
 116:	bc 01       	movw	r22, r24
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	8e 01       	movw	r16, r28
 11e:	00 0f       	add	r16, r16
 120:	11 1f       	adc	r17, r17
 122:	00 0f       	add	r16, r16
 124:	11 1f       	adc	r17, r17
 126:	0c 58       	subi	r16, 0x8C	; 140
 128:	1f 4f       	sbci	r17, 0xFF	; 255
		  A[x] = A[x]/10;
 12a:	2a e0       	ldi	r18, 0x0A	; 10
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	0e 94 b2 00 	call	0x164	; 0x164 <__divmodsi4>
 136:	f8 01       	movw	r30, r16
 138:	20 83       	st	Z, r18
 13a:	31 83       	std	Z+1, r19	; 0x01
 13c:	42 83       	std	Z+2, r20	; 0x02
 13e:	53 83       	std	Z+3, r21	; 0x03
		  audio_LED_L = x_1[A[x]]; 
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	f9 01       	movw	r30, r18
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
 14c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	8f e3       	ldi	r24, 0x3F	; 63
 150:	9c e9       	ldi	r25, 0x9C	; 156
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x5c>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x62>
 158:	00 00       	nop
	LED_VU_L;
	adc_init();
	
    while(1)
    {
      for(int x=0;x<S/2;x++)
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	c0 31       	cpi	r28, 0x10	; 16
 15e:	d1 05       	cpc	r29, r1
 160:	c4 f2       	brlt	.-80     	; 0x112 <main+0x1c>
 162:	d4 cf       	rjmp	.-88     	; 0x10c <main+0x16>

00000164 <__divmodsi4>:
 164:	05 2e       	mov	r0, r21
 166:	97 fb       	bst	r25, 7
 168:	1e f4       	brtc	.+6      	; 0x170 <__divmodsi4+0xc>
 16a:	00 94       	com	r0
 16c:	0e 94 c9 00 	call	0x192	; 0x192 <__negsi2>
 170:	57 fd       	sbrc	r21, 7
 172:	07 d0       	rcall	.+14     	; 0x182 <__divmodsi4_neg2>
 174:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__udivmodsi4>
 178:	07 fc       	sbrc	r0, 7
 17a:	03 d0       	rcall	.+6      	; 0x182 <__divmodsi4_neg2>
 17c:	4e f4       	brtc	.+18     	; 0x190 <__divmodsi4_exit>
 17e:	0c 94 c9 00 	jmp	0x192	; 0x192 <__negsi2>

00000182 <__divmodsi4_neg2>:
 182:	50 95       	com	r21
 184:	40 95       	com	r20
 186:	30 95       	com	r19
 188:	21 95       	neg	r18
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	4f 4f       	sbci	r20, 0xFF	; 255
 18e:	5f 4f       	sbci	r21, 0xFF	; 255

00000190 <__divmodsi4_exit>:
 190:	08 95       	ret

00000192 <__negsi2>:
 192:	90 95       	com	r25
 194:	80 95       	com	r24
 196:	70 95       	com	r23
 198:	61 95       	neg	r22
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	8f 4f       	sbci	r24, 0xFF	; 255
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	08 95       	ret

000001a2 <__udivmodsi4>:
 1a2:	a1 e2       	ldi	r26, 0x21	; 33
 1a4:	1a 2e       	mov	r1, r26
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	fd 01       	movw	r30, r26
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <__udivmodsi4_ep>

000001ae <__udivmodsi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	ee 1f       	adc	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	a2 17       	cp	r26, r18
 1b8:	b3 07       	cpc	r27, r19
 1ba:	e4 07       	cpc	r30, r20
 1bc:	f5 07       	cpc	r31, r21
 1be:	20 f0       	brcs	.+8      	; 0x1c8 <__udivmodsi4_ep>
 1c0:	a2 1b       	sub	r26, r18
 1c2:	b3 0b       	sbc	r27, r19
 1c4:	e4 0b       	sbc	r30, r20
 1c6:	f5 0b       	sbc	r31, r21

000001c8 <__udivmodsi4_ep>:
 1c8:	66 1f       	adc	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	88 1f       	adc	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	1a 94       	dec	r1
 1d2:	69 f7       	brne	.-38     	; 0x1ae <__udivmodsi4_loop>
 1d4:	60 95       	com	r22
 1d6:	70 95       	com	r23
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	bd 01       	movw	r22, r26
 1e2:	cf 01       	movw	r24, r30
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
